<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 疯狂coding</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in golang on 疯狂coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>guonaihong</copyright>
    <lastBuildDate>Fri, 19 Feb 2021 12:56:26 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc Reverse Integer</title>
      <link>http://localhost:1313/post/lc-reverse-integer/</link>
      <pubDate>Fri, 19 Feb 2021 12:56:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/lc-reverse-integer/</guid>
      <description>简介 吃完午饭，在午休的时间然后玩下lc。已经好久不写博客了，挑个easy的题目玩玩，然后水下。 7. 整数反转 描述 给你一个 32 位的有符号整数 x ，返回</description>
    </item>
    
    <item>
      <title>定位服务内存泄露和卡死方法(总结)</title>
      <link>http://localhost:1313/post/locating-memory-leaks-and-service-stuck/</link>
      <pubDate>Thu, 28 Jan 2021 17:22:53 +0800</pubDate>
      
      <guid>http://localhost:1313/post/locating-memory-leaks-and-service-stuck/</guid>
      <description>前言 总结一下，也许时间久了，一些方法就忘了。下面的方法都是实战中用过的，各有适用场景。 一、卡死、go程泄露&amp;ndash;获取调用栈 1.go build -ra</description>
    </item>
    
    <item>
      <title>golang bool类型是怎么实现的</title>
      <link>http://localhost:1313/post/what-type-of-implementation-is-golang-bool/</link>
      <pubDate>Mon, 18 Jan 2021 11:54:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/what-type-of-implementation-is-golang-bool/</guid>
      <description>前言 wc的时候突然蹦出一个想法，golang bool是什么类型实现的。会和c一样吗？ 既然有疑问，就做个实验看下。 如果bool的值为true，</description>
    </item>
    
  </channel>
</rss>
